//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExaminationSystem.model2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExaminationSystemEntities : DbContext
    {
        public ExaminationSystemEntities()
            : base("name=ExaminationSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Exam> Exams { get; set; }
        public virtual DbSet<Instructor> Instructors { get; set; }
        public virtual DbSet<QestionAnswer> QestionAnswers { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Stu_course> Stu_course { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Student_Exam_Question> Student_Exam_Question { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Topic> Topics { get; set; }
    
        [DbFunction("ExaminationSystemEntities", "getQuestion")]
        public virtual IQueryable<getQuestion_Result> getQuestion(Nullable<int> numOfquestions, Nullable<int> crs_id, string typeQ)
        {
            var numOfquestionsParameter = numOfquestions.HasValue ?
                new ObjectParameter("numOfquestions", numOfquestions) :
                new ObjectParameter("numOfquestions", typeof(int));
    
            var crs_idParameter = crs_id.HasValue ?
                new ObjectParameter("crs_id", crs_id) :
                new ObjectParameter("crs_id", typeof(int));
    
            var typeQParameter = typeQ != null ?
                new ObjectParameter("typeQ", typeQ) :
                new ObjectParameter("typeQ", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getQuestion_Result>("[ExaminationSystemEntities].[getQuestion](@numOfquestions, @crs_id, @typeQ)", numOfquestionsParameter, crs_idParameter, typeQParameter);
        }
    
        public virtual int assignAnswer(Nullable<int> stid, Nullable<int> examId)
        {
            var stidParameter = stid.HasValue ?
                new ObjectParameter("stid", stid) :
                new ObjectParameter("stid", typeof(int));
    
            var examIdParameter = examId.HasValue ?
                new ObjectParameter("examId", examId) :
                new ObjectParameter("examId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("assignAnswer", stidParameter, examIdParameter);
        }
    
        public virtual ObjectResult<string> delete_Ins_Crs(Nullable<int> ins_id, Nullable<int> crs_id)
        {
            var ins_idParameter = ins_id.HasValue ?
                new ObjectParameter("Ins_id", ins_id) :
                new ObjectParameter("Ins_id", typeof(int));
    
            var crs_idParameter = crs_id.HasValue ?
                new ObjectParameter("Crs_id", crs_id) :
                new ObjectParameter("Crs_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("delete_Ins_Crs", ins_idParameter, crs_idParameter);
        }
    
        public virtual ObjectResult<string> delete_Stu_Crs(Nullable<int> stu_id, Nullable<int> crs_id)
        {
            var stu_idParameter = stu_id.HasValue ?
                new ObjectParameter("Stu_id", stu_id) :
                new ObjectParameter("Stu_id", typeof(int));
    
            var crs_idParameter = crs_id.HasValue ?
                new ObjectParameter("Crs_id", crs_id) :
                new ObjectParameter("Crs_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("delete_Stu_Crs", stu_idParameter, crs_idParameter);
        }
    
        public virtual ObjectResult<string> deleteStudent(Nullable<int> stu_id)
        {
            var stu_idParameter = stu_id.HasValue ?
                new ObjectParameter("stu_id", stu_id) :
                new ObjectParameter("stu_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("deleteStudent", stu_idParameter);
        }
    
        public virtual ObjectResult<getStuCrsGrad_Result> getStuCrsGrad(Nullable<int> stu_id)
        {
            var stu_idParameter = stu_id.HasValue ?
                new ObjectParameter("stu_id", stu_id) :
                new ObjectParameter("stu_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStuCrsGrad_Result>("getStuCrsGrad", stu_idParameter);
        }
    
        public virtual ObjectResult<string> insert_Ins_Crs(Nullable<int> ins_id, Nullable<int> crs_id)
        {
            var ins_idParameter = ins_id.HasValue ?
                new ObjectParameter("Ins_id", ins_id) :
                new ObjectParameter("Ins_id", typeof(int));
    
            var crs_idParameter = crs_id.HasValue ?
                new ObjectParameter("Crs_id", crs_id) :
                new ObjectParameter("Crs_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("insert_Ins_Crs", ins_idParameter, crs_idParameter);
        }
    
        public virtual ObjectResult<string> insert_Stu_Crs(Nullable<int> stu_id, Nullable<int> crs_id, Nullable<int> grade)
        {
            var stu_idParameter = stu_id.HasValue ?
                new ObjectParameter("Stu_id", stu_id) :
                new ObjectParameter("Stu_id", typeof(int));
    
            var crs_idParameter = crs_id.HasValue ?
                new ObjectParameter("Crs_id", crs_id) :
                new ObjectParameter("Crs_id", typeof(int));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("insert_Stu_Crs", stu_idParameter, crs_idParameter, gradeParameter);
        }
    
        public virtual ObjectResult<string> insertStudent(string fname, string lname, string address, Nullable<int> age, Nullable<int> dept_id)
        {
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            var dept_idParameter = dept_id.HasValue ?
                new ObjectParameter("dept_id", dept_id) :
                new ObjectParameter("dept_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("insertStudent", fnameParameter, lnameParameter, addressParameter, ageParameter, dept_idParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<string> Update_Ins_Crs(Nullable<int> oldIns_id, Nullable<int> oldCrs_id, Nullable<int> newIns_id, Nullable<int> newCrs_id)
        {
            var oldIns_idParameter = oldIns_id.HasValue ?
                new ObjectParameter("OldIns_id", oldIns_id) :
                new ObjectParameter("OldIns_id", typeof(int));
    
            var oldCrs_idParameter = oldCrs_id.HasValue ?
                new ObjectParameter("OldCrs_id", oldCrs_id) :
                new ObjectParameter("OldCrs_id", typeof(int));
    
            var newIns_idParameter = newIns_id.HasValue ?
                new ObjectParameter("NewIns_id", newIns_id) :
                new ObjectParameter("NewIns_id", typeof(int));
    
            var newCrs_idParameter = newCrs_id.HasValue ?
                new ObjectParameter("NewCrs_id", newCrs_id) :
                new ObjectParameter("NewCrs_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Update_Ins_Crs", oldIns_idParameter, oldCrs_idParameter, newIns_idParameter, newCrs_idParameter);
        }
    
        public virtual ObjectResult<string> Update_Stu_Crs(Nullable<int> oldStu_id, Nullable<int> oldCrs_id, Nullable<int> newStu_id, Nullable<int> newCrs_id, Nullable<int> grade)
        {
            var oldStu_idParameter = oldStu_id.HasValue ?
                new ObjectParameter("OldStu_id", oldStu_id) :
                new ObjectParameter("OldStu_id", typeof(int));
    
            var oldCrs_idParameter = oldCrs_id.HasValue ?
                new ObjectParameter("OldCrs_id", oldCrs_id) :
                new ObjectParameter("OldCrs_id", typeof(int));
    
            var newStu_idParameter = newStu_id.HasValue ?
                new ObjectParameter("NewStu_id", newStu_id) :
                new ObjectParameter("NewStu_id", typeof(int));
    
            var newCrs_idParameter = newCrs_id.HasValue ?
                new ObjectParameter("NewCrs_id", newCrs_id) :
                new ObjectParameter("NewCrs_id", typeof(int));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Update_Stu_Crs", oldStu_idParameter, oldCrs_idParameter, newStu_idParameter, newCrs_idParameter, gradeParameter);
        }
    
        public virtual ObjectResult<string> UpdateStudent(Nullable<int> stu_id, string fname, string lname, string address, Nullable<int> age, Nullable<int> dept_id)
        {
            var stu_idParameter = stu_id.HasValue ?
                new ObjectParameter("stu_id", stu_id) :
                new ObjectParameter("stu_id", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            var dept_idParameter = dept_id.HasValue ?
                new ObjectParameter("dept_id", dept_id) :
                new ObjectParameter("dept_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateStudent", stu_idParameter, fnameParameter, lnameParameter, addressParameter, ageParameter, dept_idParameter);
        }
    }
}
